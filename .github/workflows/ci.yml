name: CI

on:
  push:
    branches:
      - main
      - new-dev
  pull_request: 
    branches:
      - main
      - new-dev

env:
    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy: 
      fail-fast: false
      matrix:
        projectPath:
          -  ${{ github.workspace }}
        testMode:
          - playmode
          - editmode

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
    
      - name: Return license
        uses: game-ci/unity-return-license@v2
        if: always()

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ runner.os }}-unity-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}

      - name: Test runner
        uses: game-ci/unity-test-runner@v4
        id: gameTestStep
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.102'

      - name: Install dotnet-format tool
        run: dotnet tool install -g dotnet-format
        working-directory: ./MainProj

      - name: Check code
        run: dotnet format ./MainProj/Assembly-CSharp.csproj --verbosity diagnostic

      - name: Check code in tests
        run: dotnet format Tests.csproj --verbosity diagnostic

      - name: Read user configuration
        id: read-user-config
        run: |
          USER_CONFIG=$(cat .github/workflows/user_config.json)
          echo "::set-output name=user-config::$USER_CONFIG"

      - name: Extract user data
        id: userdata
        run: |
          USER_CONFIG=$(cat .github/workflows/user_config.json)
          GITHUB_ACTOR=$(echo "$GITHUB_ACTOR")
          USER_NAME=$(echo "$USER_CONFIG" | jq -r ".users[] | select(.name == \"$GITHUB_ACTOR\") | .name")
          USER_EMAIL=$(echo "$USER_CONFIG" | jq -r ".users[] | select(.name == \"$GITHUB_ACTOR\") | .email")
          echo "::set-output name=username::$USER_NAME"
          echo "::set-output name=useremail::$USER_EMAIL"
    
      - name: Git add changes
        run: |
          git add .

      - name: Commit changes
        run: |
          git config --global user.email "${{ steps.userdata.outputs.useremail }}"
          git config --global user.name "${{ steps.userdata.outputs.username }}"
          git commit -m "Apply code formatting"
      
      - name: Push changes
        run: |
          git push || echo "Changes already pushed, skipping"

      - name: Clean up Docker
        run: docker system prune -af
      
      - name: Build project
        uses: game-ci/unity-builder@v4
        with:
          path: ${{ matrix.projectPath }}
          targetPlatform: StandaloneWindows64
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
